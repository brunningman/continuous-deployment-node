import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _typeof from "@babel/runtime/helpers/esm/typeof";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import tape from 'tape-catch';
import sinon from 'sinon';
import ImpressionTracker from '../impression';
import { STORAGE, SETTINGS, INTEGRATIONS_MANAGER } from '../../utils/context/constants';
/* Mocks start */

var generateContextMocks = function generateContextMocks() {
  // We are only mocking the pieces we care about
  var fakeSettings = {
    runtime: {
      ip: 'fake-ip',
      hostname: 'fake-hostname'
    },
    version: 'js-test-10.4.0',
    impressionListener: {
      logImpression: sinon.stub()
    }
  };
  var fakeStorage = {
    impressions: {
      track: sinon.stub()
    }
  };
  var fakeIntegrationsManager = {
    handleImpression: sinon.stub()
  };
  return {
    fakeSettings: fakeSettings,
    fakeStorage: fakeStorage,
    fakeIntegrationsManager: fakeIntegrationsManager
  };
};

var ContextMock = /*#__PURE__*/function () {
  function ContextMock(fakeStorage, fakeSettings, fakeIntegrationsManager) {
    _classCallCheck(this, ContextMock);

    this.constants = {
      STORAGE: STORAGE,
      SETTINGS: SETTINGS,
      INTEGRATIONS_MANAGER: INTEGRATIONS_MANAGER
    };
    this.fakeStorage = fakeStorage;
    this.fakeSettings = fakeSettings;
    this.fakeIntegrationsManager = fakeIntegrationsManager;
  }

  _createClass(ContextMock, [{
    key: "get",
    value: function get(target) {
      switch (target) {
        case STORAGE:
          return this.fakeStorage;

        case SETTINGS:
          return this.fakeSettings;

        case INTEGRATIONS_MANAGER:
          return this.fakeIntegrationsManager;

        default:
          break;
      }
    }
  }]);

  return ContextMock;
}();
/* Mocks end */


tape('Impression Tracker', function (t) {
  t.test('Tracker API', function (assert) {
    assert.equal(_typeof(ImpressionTracker), 'function', 'The module should return a function which acts as a factory.');

    var _generateContextMocks = generateContextMocks(),
        fakeStorage = _generateContextMocks.fakeStorage,
        fakeSettings = _generateContextMocks.fakeSettings;

    var contextMock = new ContextMock(fakeStorage, fakeSettings);
    var instance = ImpressionTracker(contextMock);
    assert.equal(_typeof(instance.track), 'function', 'The instance should implement the track method.');
    assert.end();
  });
  t.test('Propagate the value as a collection into the collector', function (assert) {
    var _generateContextMocks2 = generateContextMocks(),
        fakeStorage = _generateContextMocks2.fakeStorage,
        fakeSettings = _generateContextMocks2.fakeSettings;

    var contextMock = new ContextMock(fakeStorage, fakeSettings);
    var tracker = ImpressionTracker(contextMock);
    tracker.track(10);
    assert.true(fakeStorage.impressions.track.calledWithMatch([10]), 'Should be present in the collector sequence, which is always called with a collection.');
    assert.end();
  });
  var fakeImpression = {
    fake: 'impression'
  };
  var fakeAttributes = {
    fake: 'attributes'
  };
  t.test('Transparently propagate the impression and attributes into a listener and integration manager if provided', function (assert) {
    var _generateContextMocks3 = generateContextMocks(),
        fakeStorage = _generateContextMocks3.fakeStorage,
        fakeSettings = _generateContextMocks3.fakeSettings,
        fakeIntegrationsManager = _generateContextMocks3.fakeIntegrationsManager;

    var contextMock = new ContextMock(fakeStorage, fakeSettings, fakeIntegrationsManager);
    var tracker = ImpressionTracker(contextMock);
    tracker.track(fakeImpression, fakeAttributes);
    assert.true(fakeStorage.impressions.track.calledWithMatch([fakeImpression]), 'Even with a listener, impression should be present in the collector sequence');
    assert.true(!fakeSettings.impressionListener.logImpression.calledOnce, 'The listener should not be executed synchronously');
    assert.true(!fakeIntegrationsManager.handleImpression.calledOnce, 'The integration manager handleImpression method should not be executed synchronously.');
    setTimeout(function () {
      assert.true(fakeSettings.impressionListener.logImpression.calledOnce, 'The listener should be executed after the timeout wrapping make it to the queue stack.');
      assert.true(fakeIntegrationsManager.handleImpression.calledOnce, 'The integration manager handleImpression method should be executed after the timeout wrapping make it to the queue stack.');

      var impressionData = _objectSpread({
        impression: fakeImpression,
        attributes: fakeAttributes,
        sdkLanguageVersion: fakeSettings.version
      }, fakeSettings.runtime);

      assert.deepEqual(fakeSettings.impressionListener.logImpression.getCall(0).args[0], impressionData, 'The listener should be executed with the corresponding map.');
      assert.notEqual(fakeSettings.impressionListener.logImpression.getCall(0).args[0].impression, fakeImpression, 'but impression should be a copy');
      assert.deepEqual(fakeIntegrationsManager.handleImpression.getCall(0).args[0], impressionData, 'The integration manager handleImpression method should be executed with the corresponding map.');
      assert.notEqual(fakeIntegrationsManager.handleImpression.getCall(0).args[0].impression, fakeImpression, 'but impression should be a copy');
      assert.end();
    }, 0);
  });
});